class Quiz {
  constructor() {
    this.steps = [
      { 
        key: 'name', 
        text: '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üòä –ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', 
        type: 'text' 
      },
      { 
        key: 'running_frequency', 
        text: (name) => `–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, ${name}! –†–∞–¥, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–µ–≥ —á–∞—Å—Ç—å—é —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. –°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —Ç—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∏–ª–∏ —Ö–æ—Ç–µ–ª–∞ –±—ã –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä–æ–±–µ–∂–∫—É?`,
        type: 'select', 
        options: [
          {value: '1 —Ä–∞–∑', text: '1 —Ä–∞–∑'},
          {value: '2 —Ä–∞–∑–∞', text: '2 —Ä–∞–∑–∞'},
          {value: '3 —Ä–∞–∑–∞', text: '3 —Ä–∞–∑–∞'},
          {value: '–ë–æ–ª—å—à–µ 3 —Ä–∞–∑', text: '–ë–æ–ª—å—à–µ 3 —Ä–∞–∑'},
          {value: '–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è/–ª–∞—Å—å', text: '–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è/–ª–∞—Å—å'}
        ],
        placeholder: '–í—ã–±—Ä–∞—Ç—å'
      },
      { 
        key: 'preferred_days', 
        text: (name, data) => `–ü–æ–Ω—è–ª, ${name}! ${data.running_frequency} ‚Äì –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ! –ê –µ—Å—Ç—å –ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –æ–±—ã—á–Ω–æ —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –¥–ª—è –±–µ–≥–∞? –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.`,
        type: 'checkbox',
        options: [
          '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
          '–í—Ç–æ—Ä–Ω–∏–∫',
          '–°—Ä–µ–¥–∞',
          '–ß–µ—Ç–≤–µ—Ä–≥',
          '–ü—è—Ç–Ω–∏—Ü–∞',
          '–°—É–±–±–æ—Ç–∞',
          '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
          '–õ—é–±—ã–µ –¥–Ω–∏, –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é'
        ]
      },
      { 
        key: 'primary_motivation', 
        text: (name, data) => `${name}, —Ç–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –æ —Ç–≤–æ–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≥–ª–∞–≤–Ω–æ–µ, –∫–æ–≥–¥–∞ —Ç—ã –¥—É–º–∞–µ—à—å –æ –±–µ–≥–µ? –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –∫–∞–∫—É—é —Ü–µ–ª—å –ø—Ä–µ—Å–ª–µ–¥—É–µ—à—å?`,
        type: 'checkbox',
        options: [
          '–ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–ª–∏–≤ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –±–æ–¥—Ä–æ—Å—Ç–∏',
          '–°–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å –∏ —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ–≤—É',
          '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É',
          '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å',
          '–ü—Ä–æ—Å—Ç–æ –ø–æ–±—ã—Ç—å –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –∏ –ø–æ–¥–≤–∏–≥–∞—Ç—å—Å—è',
          '–£–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'
        ],
        otherOption: true
      },
      { 
        key: 'overcome_triggers', 
        text: (name, data) => `–≠—Ç–æ –∑–Ω–∞–∫–æ–º—ã–µ –º–Ω–æ–≥–∏–º —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏! –ê –∫–æ–≥–¥–∞ —Ç—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—à—å—Å—è —Å —Ç–∞–∫–∏–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–∞–ª–æ—Å—Ç—å—é –∏–ª–∏ –ª–µ–Ω—å—é), –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ –æ–±—ã—á–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤—Å–µ-—Ç–∞–∫–∏ —Å–æ–±—Ä–∞—Ç—å—Å—è –∏ –ø–æ–±–µ–∂–∞—Ç—å? –¢–≤–æ–∏ –ª–∏—á–Ω—ã–µ "–ª–∞–π—Ñ—Ö–∞–∫–∏"?`,
        type: 'checkbox',
        options: [
          '–í–∫–ª—é—á–∏—Ç—å –ª—é–±–∏–º—É—é —ç–Ω–µ—Ä–≥–∏—á–Ω—É—é –º—É–∑—ã–∫—É',
          '–ü–æ–¥—É–º–∞—Ç—å –æ –ø—Ä–∏—è—Ç–Ω–æ–º —á—É–≤—Å—Ç–≤–µ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–∂–∫–∏',
          '–î–∞–Ω–Ω–æ–µ —Å–µ–±–µ –æ–±–µ—â–∞–Ω–∏–µ –∏–ª–∏ —Ü–µ–ª—å',
          '–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å, –Ω–µ –¥—É–º–∞—è, –∞ —Ç–∞–º –≤—Ç—è–Ω—É—Å—å',
          '–î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å –∫–µ–º-—Ç–æ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–ª–∏–∑–∫–∏—Ö'
        ],
        otherOption: true
      },
      { 
        key: 'coaching_style', 
        text: (name, data) => `–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, ${name}! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç AI-–∫–æ—É—á—É —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—Ç—å. –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ AI-–∫–æ—É—á ‚Äì —ç—Ç–æ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä –¥–ª—è –±–µ–≥–∞. –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–±–µ –±–ª–∏–∂–µ?`,
        type: 'custom-select',
        options: Object.keys(Config.coachingStyles)
      }
    ];
    
    this.currentStep = 0;
    this.quizData = {};
    this.selectedStyle = null;
  }

  async init() {
    this.userId = ApiService.getUserId();
    this.showStep(0);
  }

  showStep(i) {
    this.currentStep = i;
    const step = this.steps[i];
    const container = document.getElementById('quiz-container');
    
    const questionText = Prompts.getQuizStepPrompt(step, this.quizData.name, this.quizData);
    container.style.display = 'flex';
    container.innerHTML = `<h3 class="quiz-question">${questionText}</h3>`;
    
    let inputHtml = '';
    
    switch(step.type) {
      case 'text':
        inputHtml = `<input class="quiz-input" id="input" required />`;
        break;
      case 'select':
        inputHtml = `
          <select class="quiz-select" id="input" required>
            <option value="" disabled selected>${step.placeholder || '–í—ã–±—Ä–∞—Ç—å'}</option>
            ${step.options.map(o => 
              `<option value="${o.value}">${o.text || o}</option>`
            ).join('')}
          </select>
        `;
        break;
      case 'checkbox':
        inputHtml = `
          <div class="checkbox-group">
            ${step.options.map((option, idx) => `
              <div class="checkbox-item">
                <input type="checkbox" id="option-${idx}" value="${option}">
                <label for="option-${idx}">${option}</label>
              </div>
            `).join('')}
            ${step.otherOption ? `
              <div style="margin-top: 10px;">
                <input type="text" class="quiz-input" id="other-input" placeholder="–î—Ä—É–≥–æ–µ (–Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)" style="width: 100%; padding: 10px; box-sizing: border-box;">
              </div>
            ` : ''}
          </div>
        `;
        break;
      case 'custom-select':
        inputHtml = `
          <div class="style-select-container">
            <div class="style-buttons-container">
              ${step.options.map(style => `
                <div>
                  <div class="style-button-row">
                    <button class="style-button" data-style="${style}" onclick="quiz.selectStyle('${style}')">${style}</button>
                    <button class="style-info-button" onclick="quiz.showStyleTooltip('${style}')">i</button>
                  </div>
                  <div id="tooltip-${style}" class="style-tooltip">
                    ${Config.coachingStyles[style]}
                  </div>
                </div>
              `).join('')}
            </div>
            <input type="hidden" id="style-input" value="">
          </div>
        `;
        break;
    }
    
    container.innerHTML += inputHtml + `<button class="quiz-button" id="next" ${step.type === 'checkbox' || step.type === 'custom-select' ? 'disabled' : ''}>–î–∞–ª–µ–µ</button>`;
    
    const nextBtn = document.getElementById('next');
    const input = step.type === 'checkbox' ? null : document.getElementById('input');
    
    if (step.type === 'checkbox') {
      const checkboxes = container.querySelectorAll('input[type="checkbox"]');
      const otherInput = container.querySelector('#other-input');
      
      const updateNextBtn = () => {
        const anyChecked = Array.from(checkboxes).some(cb => cb.checked) || 
                         (otherInput && otherInput.value.trim() !== '');
        nextBtn.disabled = !anyChecked;
      };
      
      checkboxes.forEach(cb => {
        cb.addEventListener('change', updateNextBtn);
      });
      
      if (otherInput) {
        otherInput.addEventListener('input', updateNextBtn);
      }
    } else if (input) {
      input.addEventListener('input', () => {
        nextBtn.disabled = input.value.trim() === '';
      });
      input.focus();
    }
    
    nextBtn.onclick = () => this.handleNextStep(step);
  }

  selectStyle(style) {
    if (this.selectedStyle) {
      const prevButton = document.querySelector(`.style-button[data-style="${this.selectedStyle}"]`);
      if (prevButton) prevButton.classList.remove('selected');
    }
    
    this.selectedStyle = style;
    const selectedButton = document.querySelector(`.style-button[data-style="${style}"]`);
    if (selectedButton) selectedButton.classList.add('selected');
    
    document.getElementById('next').disabled = false;
  }

  showStyleTooltip(style) {
    const tooltip = document.getElementById(`tooltip-${style}`);
    tooltip.style.display = tooltip.style.display === 'block' ? 'none' : 'block';
  }

  handleNextStep(step) {
    let val;
    
    if (step.type === 'checkbox') {
      const selected = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
        .map(cb => cb.value);
      if (step.otherOption) {
        const otherVal = document.querySelector('#other-input')?.value.trim();
        if (otherVal) selected.push(otherVal);
      }
      val = selected.join(', ');
    } else if (step.type === 'custom-select') {
      val = this.selectedStyle;
      if (!val) return;
    } else {
      val = document.getElementById('input').value.trim();
    }
    
    if (!val && step.type !== 'checkbox') return;
    
    this.quizData[step.key] = val;
    
    if (this.currentStep + 1 < this.steps.length) {
      this.showStep(this.currentStep + 1);
    } else {
      this.finishQuiz();
    }
  }

  async finishQuiz() {
    document.getElementById('quiz-container').style.display = 'none';
    document.getElementById('loader').style.display = 'flex';
    
    try {
      this.quizData.last_messages = [];
      this.quizData.last_greet_ts = new Date().toISOString();
      this.quizData.signup_date = new Date().toISOString();
      
      await ApiService.saveQuizData(this.userId, this.quizData);
      
      document.getElementById('chat-container').style.display = 'flex';
      document.getElementById('loader').style.display = 'none';
      
      window.startChat(false, this.quizData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞:', error);
      document.getElementById('loader').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }
}

window.quiz = new Quiz();